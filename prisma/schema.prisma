// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                        String                     @id @default(cuid())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  name                      String
  whatsappBusinessNumber    String
  whatsappBusinessApiToken  String
  users                     User[]
  notificationSubscriptions NotificationSubscription[]
  tags                      Tag[]
  products                  Product[]
  chats                     Chat[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
}

model NotificationSubscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endpoint  String
  p256dh    String
  auth      String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  category  Category
  aliases   String[]
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  products  Product? @relation(fields: [productId], references: [id])
  productId String?
}

enum Category {
  COLOR
  GENDER
  AGE
  SIZE
  TYPE
  MATERIAL
  BRAND
  STYLE
  OCCASION
  PATTERN
  SLEEVE
  NECK
  MISC
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  display   Boolean
  name      String
  price     Float
  size      String
  packOf    Int
  tags      Tag[]
  images    Image[]
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

/// WhatsApp Business API Models

model Chat {
  id        String    @id @default(cuid())
  savedName String?
  party     Party?    @relation(fields: [partyId], references: [id])
  partyId   String?
  waName    String
  phone     String
  chatState ChatState
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String
  messages  Message[]
}

model Party {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  address   String
  chats     Chat[]
}

enum ChatState {
  FILTER
  CATALOG
  OTHER
}

model Message {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  chat      Chat             @relation(fields: [chatId], references: [id])
  chatId    String
  text      String?
  type      MessageType
  status    MessageStatus
  direction MessageDirection
  media     Media?
  location  Location?
  contact   Contact?
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  DOCUMENT
  LOCATION
  CONTACT
  STICKER
  AUDIO
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum MessageDirection {
  INBOUND
  OUTBOUND
  BOT
}

model Media {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @unique
}

model Location {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude  Float
  longitude Float
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @unique
}

model Contact {
  id        String    @id @default(cuid())
  name      String
  phone     String
  chatState ChatState
  message   Message   @relation(fields: [messageId], references: [id])
  messageId String    @unique
}
